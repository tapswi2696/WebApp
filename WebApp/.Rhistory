{
cat(paste("attr(odmdata$", ivec[i], ",\"Alias_Contexts\") <- c(\"", sep=""))
cat(paste(contexts, collapse="\",\""))
cat("\")\n")
for (p in 1: length(contexts) )
{
cnames <- rep("",length(CLitems))
if (length(CLitems) > 0) for (pp in 1: length(CLitems) )
{
CLitem <- CLitems[[pp]]
AlNodes <- CLitem[tolower(names(xmlChildren(CLitem)))=="alias"]
if (length(AlNodes)>0 )
{
for (nn in 1: length(AlNodes) )
{
if (contexts[p] == xmlAttrs(AlNodes[[nn]])["Context"] )
{
if (cnames[pp] =="")
{
cnames[pp] <- xmlAttrs(AlNodes[[nn]])["Name"]
}
else
{
cnames[pp] <- paste(cnames[pp], xmlAttrs(AlNodes[[nn]])["Name"], sep=" ")
}
}
}
}
}
cat(paste("attr(odmdata$", ivec[i], ",\"",contexts[p],"\") <- c(\"", sep=""))
cat(paste(cnames, collapse="\",\""))
cat("\")\n")
}
}
}
}
}
# Output Alias / Item
tmp <- vector()
if (length(ainfo) > 0)
{
cat("attr(odmdata, \"Alias_Items\") <- matrix(ncol=3,byrow=T, data=c(\n")
for (i in 1:length(ainfo) )
{
tmp[i] <- paste("\"", ainfo[[i]][1], "\",\"", ainfo[[i]][2], "\",\"", ainfo[[i]][3], "\"", sep="")
}
cat( paste(tmp, sep="", collapse=",\n") )
cat(" ))\n")
}
#
return(paste0("MetaData: ", length(ivec), " items\n"))
}
.ODMClinicalData2R <- function(ODMfile, Form_OID, IG_OID)
{
subjects <- vector()
ODM = xmlRoot(xmlTreeParse(ODMfile),useInternalNodes=TRUE)
ClinDatNodes <- ODM[names(xmlChildren(ODM))=="ClinicalData"]
if (length(ClinDatNodes)==0) {
cat("clindata <- data.frame()\n")
return ("No ClinicalData\n")
break
}
cat("clindata <- data.frame(StudyOID=character(),\nMetaDataVersionOID=character(),\nSubjectKey=character(),
\nLocationOID=character(),\nStudyEventOID=character(),\nStudyEventRepeatKey=character(),
\nFormOID=character(),\nFormRepeatKey=character(),\nItemGroupOID=character(),
\nItemGroupRepeatKey=character(),\nItemOID=character(), \nValue=character(),
stringsAsFactors = F)\n")
valueCounter<-1 #add line item value by item value
# Go through all Clinical Data Nodes
for (i1 in 1: length(ClinDatNodes) )
{
ClinDatNode <- ClinDatNodes[[i1]]
StudyOID <- xmlAttrs(ClinDatNode)["StudyOID"]
MetaDataVersionOID <- xmlAttrs(ClinDatNode)["MetaDataVersionOID"]
SubjectDataNodes <-ClinDatNode[names(xmlChildren(ClinDatNode))=="SubjectData"]
# Go through all SubjectDataNodes
if (length(SubjectDataNodes)>0) for (i2 in 1: length(SubjectDataNodes) )
{
SubjectDataNode=SubjectDataNodes[[i2]]
SubjectKey <- xmlAttrs(SubjectDataNode)["SubjectKey"]
subjects <- c(subjects, SubjectKey)
SiteRefNodes <-SubjectDataNode[names(xmlChildren(SubjectDataNode))=="SiteRef"]
SiteRefNode <- NULL
LocationOID <- NULL
if (length(SiteRefNodes)>0){
SiteRefNode <- SiteRefNodes[[1]]
LocationOID <- xmlAttrs(SiteRefNode)["LocationOID"]
}
# Go through all StudyEventDataNodes (if no StudyEventDataNodes available look for FormDataNodes)
StudyEventDataNodes <- SubjectDataNode[names(xmlChildren(SubjectDataNode))=="StudyEventData"]
for (i3 in 1: length(StudyEventDataNodes) )
{
StudyEventOID<-NULL
StudyEventRepeatKey <- NULL
if (length(StudyEventDataNodes)>0){
StudyEventDataNode <- StudyEventDataNodes[[i3]]
StudyEventOID <- xmlAttrs(StudyEventDataNode)["StudyEventOID"]
StudyEventRepeatKey <- xmlAttrs(StudyEventDataNode)["StudyEventRepeatKey"]
# Go through all FormDataNodes
FormDataNodes <- StudyEventDataNode[names(xmlChildren(StudyEventDataNode))=="FormData"]
}
# if no StudyEventDataNodes available look for FormDataNodes
else{
FormDataNodes <- SubjectDataNode[names(xmlChildren(SubjectDataNode))=="FormData"]
}
for (i4 in 1: length(FormDataNodes) )
{
if (length(FormDataNodes)==0) break
FormDataNode <- FormDataNodes[[i4]]
FormOID<- xmlAttrs(FormDataNode)["FormOID"]
if (Form_OID != "" && Form_OID != FormOID) next
FormRepeatKey <- xmlAttrs(FormDataNode)["FormRepeatKey"]
# Go through all ItemGroupData Nodes
ItemGroupDataNodes <- FormDataNode[names(xmlChildren(FormDataNode))=="ItemGroupData"]
for (i5 in 1: length(ItemGroupDataNodes) )
{
if (length(ItemGroupDataNodes)==0) break
ItemGroupDataNode <- ItemGroupDataNodes[[i5]]
ItemGroupOID <- xmlAttrs(ItemGroupDataNode)["ItemGroupOID"]
if (IG_OID != "" && IG_OID != ItemGroupOID) next
ItemGroupRepeatKey <- xmlAttrs(ItemGroupDataNode)["ItemGroupRepeatKey"]
# Go through all ItemData Nodes
ItemDataNodes <- ItemGroupDataNode[names(xmlChildren(ItemGroupDataNode))=="ItemData"]
for (i6 in 1: length(ItemDataNodes) )
{
if (length(ItemDataNodes)==0) break
ItemGroupDataNodes
ItemDataNode <- ItemDataNodes[[i6]]
ItemOID <- xmlAttrs(ItemDataNode)["ItemOID"]
cat("clindata[", valueCounter,",\"ItemOID\"]<-","\"",ItemOID,"\"","\n",sep="") # Add ItemOID
Value <- xmlAttrs(ItemDataNode)["Value"]
cat("clindata[", valueCounter,",\"Value\"]<-","\"",Value,"\"","\n",sep="") # Add Item value
# Insert Values of Upper Nodes
cat("clindata[", valueCounter,",\"StudyOID\"]<-","\"",StudyOID,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"MetaDataVersionOID\"]<-","\"",MetaDataVersionOID,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"SubjectKey\"]<-","\"",SubjectKey,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"LocationOID\"]<-","\"",LocationOID,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"StudyEventOID\"]<-","\"",StudyEventOID,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"StudyEventRepeatKey\"]<-","\"",StudyEventRepeatKey,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"FormOID\"]<-","\"",FormOID,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"FormRepeatKey\"]<-","\"",FormRepeatKey,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"ItemGroupOID\"]<-","\"",ItemGroupOID,"\"","\n",sep="")
cat("clindata[", valueCounter,",\"ItemGroupRepeatKey\"]<-","\"",ItemGroupRepeatKey,"\"","\n",sep="")
# Start new line, and insert old value for upper nodes
valueCounter <- valueCounter+1
}
}
}
}
}
}
# return value: info text
first_subject <- ""
last_subject <- ""
if (length(subjects)>0)
{
first_subject <- subjects[1]
last_subject <- subjects[length(subjects)]
}
subjects <- unique(subjects)
subject_text <- ""
if (length(subjects) == 1) subject_text <- paste0(" (", first_subject,")")
if (length(subjects)  > 1) subject_text <- paste0(" (", first_subject," .. ", last_subject, ")")
return(paste0("ClinicalData: ",length(subjects), " subjects", subject_text, ", ", valueCounter-1, " values\n" ))
}
ODM2R <- function( ODMfile="", Form_OID="", IG_OID="")
{
cat("ODM2R\n")
if (ODMfile == "") ODMfile <- file.choose()
cat(paste0("ODMfile=",ODMfile,"\n"))
Rfile <- paste(ODMfile,".R",sep="")
cat(paste0("Rfile=",Rfile,"\n"))
sink(Rfile)
resultMetaData <- .ODMMetaData2R( ODMfile, Form_OID, IG_OID )
resultClinicalData <- .ODMClinicalData2R( ODMfile, Form_OID, IG_OID )
sink()
cat(paste0(resultMetaData, resultClinicalData))
}
View(ODM2R)
ODMMetaData2R(ODMfile="https://evs.nci.nih.gov/ftp1/CDISC/SDTM/CDASH%20Terminology.odm.xml", Form_OID="", IG_OID="")
.ODMMetaData2R(ODMfile="https://evs.nci.nih.gov/ftp1/CDISC/SDTM/CDASH%20Terminology.odm.xml", Form_OID="", IG_OID="")
library(devtools)
install_github("acobos/ox")
rm(list = ls())
rm(list = ls())
getwd("/Users/sp/Desktop/CT/xls")
rm(list = ls())
getwd("/Users/sp/Desktop/CT/xls/")
rm(list = ls())
getwd("/Users/sp/Desktop/CT")
getwd("/Users/sp/Desktop/CT")
getwd("/Users/sp/Desktop/CT")
getwd('/Users/sp/Desktop/CT')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp()
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
rm(list = ls())
library(readxl)
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library(dplyr)
library(haven)
library(DT)
library(units)
library(shinyWidgets)
library(data.table)
library(stringr)
library(stringi)
library(plotly)
load(file = "Alldata.RData")
termData <- Alldata
termData$last.update <- as.character.POSIXt(termData$last.update)
rm(Alldata)
grati <- data.frame("SN" = 1:3,
"Contributor.List" = c("Parth Shah","Vishal Zaveri","Toral Patel"),
"Email" = c("tapswi2696@gmail.com", "vbzaveri1@gmail.com","toral2306@gmail.com"),
"Role" = c("Product Owner & Developer","Developer & Technical Architect","Feature Product Owner & Technical Architect"),
"Phone" = c("Based on scheduled appointments only","Based on scheduled appointments only","Based on scheduled appointments only"))
rm(list = ls())
library(readxl)
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library(dplyr)
library(haven)
library(DT)
library(units)
library(shinyWidgets)
library(data.table)
library(stringr)
library(stringi)
library(plotly)
load(file = "Alldata.RData")
termData <- Alldata
termData$last.update <- as.character.POSIXt(termData$last.update)
rm(Alldata)
grati <- data.frame("SN" = 1:3,
"Contributor.List" = c("Parth Shah","Vishal Zaveri","Toral Patel"),
"Email" = c("tapswi2696@gmail.com", "vbzaveri1@gmail.com","toral2306@gmail.com"),
"Role" = c("Product Owner & Developer","Developer & Technical Architect","Feature Product Owner & Technical Architect"),
"Phone" = c("Based on scheduled appointments only","Based on scheduled appointments only","Based on scheduled appointments only"))
getwd()
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
IgData$logical <- ifelse(IgData$Core =="Req", TRUE, FALSE)
View(Alldataig)
View(IgData)
if(IgData$Core =="Req"){
IgData$logical==1
} else if (IgData$Core =="Perm"){
IgData$logical==2
} else {
IgData$logical==3
}
IgData$logical <- as.factor(IgData$Core)
View(IgData)
IgData$logical <- as.numeric(as.factor(IgData$Core))
View(IgData)
IgData$logical <- as.numeric(as.factor(IgData$Core))
class(IgData$logical)
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
View(IgData)
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
View(IgData)
View(termData)
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
View(IgData)
View(IgData)
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
shiny::runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
runApp('Desktop/CT/xls/WebApp')
load("~/Desktop/CT/xls/WebApp/visits.Rdata")
load("~/Desktop/CT/xls/WebApp/visits.Rdata")
load("~/Desktop/CT/xls/WebApp/visits1.Rdata")
load(file = "Visit.Rdata")
setwd("~/Desktop/CT/xls/WebApp")
load(file = "Visit1.Rdata")
load("/Users/sp/Desktop/CT/xls/WebApp/visits.Rdata")
load("~/Desktop/CT/xls/WebApp/visits.Rdata")
x <- load("~/Desktop/CT/xls/WebApp/visits.Rdata")
runApp()
runApp()
runApp()
runApp()
x <- load("~/Desktop/CT/xls/WebApp/Wc.Rdata")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(IgData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
